#! /usr/bin/env python3
import os
import sys

try:
    from argparse import ArgumentParser
except:
    err = """
    You haven't installed the required dependencies.
    Run 'python setup.py install' to install the dependencies.
    """
    print(err)
    sys.exit(0)

from lib import Args
from lib.Constants import Const
from lib.global_config import get_problem_name


coolkit_help="""usage coolkit [option] [--suboptions [args]]

options:
init        to initilize given folder as coolkit folder
set         to set values to various variables in .coolkit/config
run         to run a code against the sample testcases
fetch       to fetch data of a given contest
submit      to submit a problem
config      to configure username and password"""


def extract_args(args):
    args.extend(['list_args','--help','-h','help'])
    first_arg = None
    if(len(sys.argv) > 1):
        argv_new = [sys.argv[0]]
        first_arg = sys.argv[1]
        if(len(sys.argv) > 2):
            argv_new.extend(sys.argv[2:])
        sys.argv = argv_new
    else:
        print(coolkit_help)
        sys.exit(0)

    if(first_arg not in args):
        print(coolkit_help)
        sys.exit(0)

    return first_arg

def check_file_name():
    if(len(sys.argv) > 1):
        argv_new = [sys.argv[0]]
        first_arg = sys.argv[1]
        if(os.path.isfile(first_arg)):
            if(len(sys.argv) > 2):
                argv_new.extend(sys.argv[2:])
            sys.argv = argv_new
            return first_arg
    return None

def parse_args():
    args_avail = ['init','set','run','fetch','submit','config','list_args']
    first_arg = extract_args(args_avail[:])

    parser = ArgumentParser()

    args = {}
    if(first_arg == "init"):
        '''
        initilize a repo as coolkit repo
        creates a .coolkit folder and a config file inside it.
        automatically detects contest name from foldername
        if parent repo is initilized then creates its ditoo copy of config
            parameters override
            contest name(overrides only if detected)
        '''
        parser.add_argument('-c',"--contest",
                            help="contest num ex: 1080, 987, 840")
        parser.add_argument('-t',"--type",
                            default = 'contest',
                            help="contest type")
        parser.add_argument('-p',"--prob",
                            default = 'A',
                            help="problem seq ex: A, B, C")
        parser.add_argument('-s',"--site",
                            default='codeforces',
                            help="contest_site full link ex: codeforces")
        parser.add_argument('-l',"--list_args",
                            action='store_true',
                            help="contest_site full link ex: codeforces")
        pars_args = parser.parse_args()
        if(pars_args.list_args):
            print('--contest --type --prob --site')
            sys.exit(0)
        if(pars_args.contest): args['contest'] = pars_args.contest
        args['type'] = pars_args.type
        args['prob'] = pars_args.prob
        args['site'] = pars_args.site
        Args.init_repo(args)

    elif(first_arg == "set"):
        '''
        just set values to config file in nearest ancestor coolkit directory
        doesn't initilize a repo as coolkit repo if any parent repo is already initilized.
        '''
        parser.add_argument('-c',"--contest",
                            help="contest num ex: 1080, 987, 840")
        parser.add_argument('-t',"--type",
                            help="contest type")
        parser.add_argument('-p',"--prob",
                            help="problem seq ex: A, B, C")
        parser.add_argument('-s',"--site",
                            help="contest_site ex: codeforces")
        pars_args = parser.parse_args()
        if(pars_args.contest): args['contest'] = pars_args.contest
        if(pars_args.type): args['type'] = pars_args.type
        if(pars_args.prob): args['prob'] = pars_args.prob
        if(pars_args.site): args['site'] = pars_args.site
        Args.set_local_config(args)

    elif(first_arg == "run"):
        if(not Args.check_init()):
            print('`run` is only available for coolkit repo. initilize it as coolkit repo with `coolkit init`')
            sys.exit(0)
        # implement coolkit run A.cpp
        file_name = check_file_name()
        if(not file_name):
            parser.add_argument('-i',"--inp",
                                help="input file")
        parser.add_argument('-t',"--test",
                            type=int,
                            default = 0,
                            help="test case num")
        parser.add_argument('-p',"--prob",
                            help="problem seq ex: A, B, C")

        pars_args = parser.parse_args()
        data = Args.fetch_data_from_local_config()

        if(pars_args.test): args['test'] = pars_args.test

        # verify contest
        args['contest'] = data['contest']
        if(not args['contest']):
            print('contest not set, please set contest using `coolkit set -c <contest_num>`')
            sys.exit(0)

        # verify file
        if(file_name): args['inp'] = file_name
        elif(pars_args.inp): args['inp'] = pars_args.inp
        else: args['inp'] = data['inp']
        if(not args['inp']):
            print('unable to detect input file, provide name of input file using -i <file.cpp>')
            sys.exit(0)
        if(not os.path.isfile(args['inp'])):
            print(args['inp'],'is not a valid file location, please provide a valid file path')
            sys.exit(0)

        # verify prob
        if(pars_args.prob): args['prob'] = pars_args.prob
        else:
            p = get_problem_name(args['inp'].split('/')[-1])
            if(p == None): p = data['prob']
            args['prob'] = p

        Args.set_local_config(args) #cache up the args for next turn
        Args.run(args)

    elif(first_arg == "fetch"):
        parser.add_argument('-f',"--force",
                            action='store_true',
                            default=False,
                            help="forcefully fetch contest")
        parser.add_argument('-c',"--contest",
                            help="contest num ex: 1080, 987, 840")
        parser.add_argument('-t',"--type",
                            default = 'contest',
                            help="contest type")
        parser.add_argument('-s',"--site",
                            default='codeforces',
                            help="contest_site ex: codeforces")
        # Args.check_init() # fetching can be done even without this if contest name given
        pars_args = parser.parse_args()
        if(pars_args.contest): args['contest'] = pars_args.contest
        if(pars_args.type): args['type'] = pars_args.type
        if(pars_args.site): args['site'] = pars_args.site
        args['force'] = pars_args.force
        if(not pars_args.contest):
            if(not Args.check_init()):
                print('no contest provided, either provide contest using -c or run command from a coolkit repo')
                sys.exit(0)
            args['contest'] = Args.fetch_data_from_local_config()['contest']
            if(not args['contest']):
                print('contest not set, use `coolkit set -c <contest num>`, or provide contest name using -c parameter')
                sys.exit(0)
            print('detected contest num : ' + args['contest'])
        Args.fetch_contest(args)



    elif(first_arg == "submit"):
        parser.add_argument('-c',"--contest",
                            help="contest num ex: 1080, 987, 840")
        parser.add_argument('-t',"--type",
                            help="contest type")
        parser.add_argument('-p',"--prob",
                            help="problem seq ex: A, B, C")
        parser.add_argument('-s',"--site",
                            help="contest_site ex: codeforces")
        if(not Args.check_init()):
            print('`submit` is only available for coolkit repo. initilize it as coolkit repo with `coolkit init`')
            sys.exit(0)
        pars_args = parser.parse_args()
        if(pars_args.contest): args['contest'] = pars_args.contest
        if(pars_args.type): args['type'] = pars_args.type
        if(pars_args.prob): args['prob'] = pars_args.prob
        if(pars_args.site): args['site'] = pars_args.site

    elif(first_arg == "config"):
        parser.add_argument('-u',"--user",
                            help="username/handle")
        parser.add_argument('-p',"--pswd",
                            help="password")
        pars_args = parser.parse_args()
        if(pars_args.user): args['user'] = pars_args.user
        if(pars_args.pswd): args['pswd'] = pars_args.pswd
        Args.set_global_config(args)


    elif(first_arg in ['--help','-h','help']):
        print(coolkit_help)
        return

    elif(first_arg == "list_args"):
        print(' '.join(sorted(args_avail[:-1])))
        return

if __name__ == '__main__':
    parse_args()
